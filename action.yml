name: Setup Python and Poetry
description: Setup Python and Poetry. Cribbed from snok/install-poetry.
inputs:
  python-version:
    description: Python version to pass to actions/setup-python@v2.
    required: false
    default: "3.x"
  poetry-version:
    description: Poetry version to install via pip.
    required: false
    default: "1.2.0"
  extras:
    description: >
      If present, a space separated list of extras to pass to
      `poetry install --extra ...`. Either way, dev-dependencies
      will be installed.
    # If https://github.com/python-poetry/poetry/issues/3413 get solved, I think
    # we should make this action install all extras by default.
    required: false
    default: ""
runs:
  using: composite
  steps:
    - name: Setup Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Check for poetry lock
      run: "test -f poetry.lock || (echo No lock file! && false)"
      shell: bash

    - name: Determine poetry installation location
      id: pipx-dirs
      run: |
        echo "::set-output name=poetry::$(pipx environment --value PIPX_LOCAL_VENVS)/poetry"
        echo "::set-output name=bin::$(pipx environment --value PIPX_BIN_DIR)"/poetry
      shell: bash

    - name: Restore/cache poetry installation
      id: poetry-install-cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.pipx-dirs.outputs.poetry }}
          ${{ steps.pipx-dirs.outputs.bin }}
        key: poetry-install-cache-${{ steps.setup-python.outputs.python-version }}-1.2.0

    - name: Install poetry from scratch
      if: "${{ steps.poetry-install-cache.outputs.cache-hit != 'true' }}"
      run: pipx install poetry==1.2.0
      shell: bash

    # Poetry manages a virtualenv for us. We're going to cache that too.
    # Again, we're following snok/install-poetry's README.
    - name: Locate poetry venv
      id: poetry-venvs
      run: echo "::set-output name=dir::$(poetry config virtualenvs.path)"
      shell: bash

    - name: Restore/cache poetry venv
      id: poetry-venv-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.poetry-venvs.outputs.dir }}
        key: poetry-venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ inputs.extras }}

    - name: Check that the poetry lockfile is up to date
      # This is rather hacky. We look for the warning message in poetry's
      # output. We really want to use `poetry lock --check`, but that is only
      # available in poetry 1.2.
      # https://github.com/python-poetry/poetry/issues/1406
      #
      # Note that the error message has changed with Poetry 1.2 to
      #     Warning: poetry.lock is not consistent with pyproject.toml. You may be
      #     getting improper dependencies. Run poetry lock [--no-update] to fix it.
      # So this check fails on Poetry 1.2. But that version of poetry wants to change
      # the lockfile to include versions of setuptools for each dependency. So it's
      # convenient to leave this as-is, unless we want to change to use Poetry 1.2 by
      # default in the future.
      run: >-
        poetry export --without-hashes | (! grep "The lock file is not up to date") ||
        (echo pyproject.toml was updated without running \`poetry lock --no-update\`. && false)
      shell: bash

    - name: Install project (no extras)
      if: inputs.extras == ''
      run: poetry install --no-interaction
      shell: bash

    - name: Install project with --extras=${{ inputs.extras }}
      if: inputs.extras != ''
      run: poetry install --no-interaction --extras="${{ inputs.extras }}"
      shell: bash

    # For debugging---let's just check what we're working with.
    - name: Dump virtual environment
      run: |
        poetry env info
        poetry run pip list
      shell: bash
